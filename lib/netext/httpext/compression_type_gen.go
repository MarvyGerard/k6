// Code generated by "enumer -type=CompressionType -transform=snake -json -text -trimprefix CompressionType -output compression_type_gen.go"; DO NOT EDIT.

package httpext

import (
	"encoding/json"
	"fmt"
)

const _CompressionTypeName = "gzipdeflate"

var _CompressionTypeIndex = [...]uint8{0, 4, 11}

func (i CompressionType) String() string {
	if i >= CompressionType(len(_CompressionTypeIndex)-1) {
		return fmt.Sprintf("CompressionType(%d)", i)
	}
	return _CompressionTypeName[_CompressionTypeIndex[i]:_CompressionTypeIndex[i+1]]
}

var _CompressionTypeValues = []CompressionType{0, 1}

var _CompressionTypeNameToValueMap = map[string]CompressionType{
	_CompressionTypeName[0:4]:  0,
	_CompressionTypeName[4:11]: 1,
}

// CompressionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompressionTypeString(s string) (CompressionType, error) {
	if val, ok := _CompressionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CompressionType values", s)
}

// CompressionTypeValues returns all values of the enum
func CompressionTypeValues() []CompressionType {
	return _CompressionTypeValues
}

// IsACompressionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CompressionType) IsACompressionType() bool {
	for _, v := range _CompressionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CompressionType
func (i CompressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CompressionType
func (i *CompressionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CompressionType should be a string, got %s", data)
	}

	var err error
	*i, err = CompressionTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CompressionType
func (i CompressionType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CompressionType
func (i *CompressionType) UnmarshalText(text []byte) error {
	var err error
	*i, err = CompressionTypeString(string(text))
	return err
}
